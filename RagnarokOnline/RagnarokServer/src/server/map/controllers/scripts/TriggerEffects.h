#pragma once
#include <server/common/TriggerEffectsCommon.h>
#include <server/map_objects/Character.h>

#include <sdk/enum_cast.hpp>

#include <cstdint>
#include <array>

class Map;
class ItemScripts;

class TriggerEffects final
{

public:
	TriggerEffects(Map& map);

	//********** Effect handler declarations
	void bStr(Character& src, OperationType opType, int32_t arg1);
	void bAgi(Character& src, OperationType opType, int32_t arg1);
	void bVit(Character& src, OperationType opType, int32_t arg1);
	void bInt(Character& src, OperationType opType, int32_t arg1);
	void bDex(Character& src, OperationType opType, int32_t arg1);
	void bLuk(Character& src, OperationType opType, int32_t arg1);
	void bAgiVit(Character& src, OperationType opType, int32_t arg1);
	void bAgiDexStr(Character& src, OperationType opType, int32_t arg1);
	void bAllStats(Character& src, OperationType opType, int32_t arg1);
	void bMaxHP(Character& src, OperationType opType, int32_t arg1);
	void bMaxHPRate(Character& src, OperationType opType, int32_t arg1);
	void bMaxSP(Character& src, OperationType opType, int32_t arg1);
	void bMaxSPRate(Character& src, OperationType opType, int32_t arg1);
	void bHPrecovRate(Character& src, OperationType opType, int32_t arg1);
	void bSPrecovRate(Character& src, OperationType opType, int32_t arg1);
	void bUseSPRate(Character& src, OperationType opType, int32_t arg1);
	void bNoRegen(Character& src, OperationType opType, int32_t arg1);
	void bHPDrainValue(Character& src, OperationType opType, int32_t arg1);
	void bSPDrainValue(Character& src, OperationType opType, int32_t arg1);
	void bHPDrainRate(Character& src, OperationType opType, int32_t arg1);
	void bSPDrainRate(Character& src, OperationType opType, int32_t arg1);
	void bHPGainValue(Character& src, OperationType opType, int32_t arg1);
	void bSPGainValue(Character& src, OperationType opType, int32_t arg1);
	void bMagicHPGainValue(Character& src, OperationType opType, int32_t arg1);
	void bMagicSPGainValue(Character& src, OperationType opType, int32_t arg1);
	void bAtk(Character& src, OperationType opType, int32_t arg1);
	void bAtk2(Character& src, OperationType opType, int32_t arg1);
	void bAtkRate(Character& src, OperationType opType, int32_t arg1);
	void bBaseAtk(Character& src, OperationType opType, int32_t arg1);
	void bDef(Character& src, OperationType opType, int32_t arg1);
	void bDef2(Character& src, OperationType opType, int32_t arg1);
	void bDefRate(Character& src, OperationType opType, int32_t arg1);
	void bDef2Rate(Character& src, OperationType opType, int32_t arg1);
	void bNearAtkDef(Character& src, OperationType opType, int32_t arg1);
	void bLongAtkDef(Character& src, OperationType opType, int32_t arg1);
	void bMagicAtkDef(Character& src, OperationType opType, int32_t arg1);
	void bMiscAtkDef(Character& src, OperationType opType, int32_t arg1);
	void bCriticalDef(Character& src, OperationType opType, int32_t arg1);
	void bLongAtkRate(Character& src, OperationType opType, int32_t arg1);
	void bCritAtkRate(Character& src, OperationType opType, int32_t arg1);
	void bNoWeaponDamage(Character& src, OperationType opType, int32_t arg1);
	void bNoMagicDamage(Character& src, OperationType opType, int32_t arg1);
	void bNoMiscDamage(Character& src, OperationType opType, int32_t arg1);
	void bAtkEle(Character& src, OperationType opType, int32_t arg1);
	void bDefEle(Character& src, OperationType opType, int32_t arg1);
	void bDefRatioAtkEle(Character& src, OperationType opType, int32_t arg1);
	void bDefRatioAtkRace(Character& src, OperationType opType, int32_t arg1);
	void bDefRatioAtkClass(Character& src, OperationType opType, int32_t arg1);
	void bMatk(Character& src, OperationType opType, int32_t arg1);
	void bMatkRate(Character& src, OperationType opType, int32_t arg1);
	void bMdef(Character& src, OperationType opType, int32_t arg1);
	void bMdef2(Character& src, OperationType opType, int32_t arg1);
	void bMdefRate(Character& src, OperationType opType, int32_t arg1);
	void bMdef2Rate(Character& src, OperationType opType, int32_t arg1);
	void bHealPower(Character& src, OperationType opType, int32_t arg1);
	void bHealPower2(Character& src, OperationType opType, int32_t arg1);
	void bAddItemHealRate(Character& src, OperationType opType, int32_t arg1);
	void bCastRate(Character& src, OperationType opType, int32_t arg1);
	void bFixedCastRate(Character& src, OperationType opType, int32_t arg1);
	void bFixedCast(Character& src, OperationType opType, int32_t arg1);
	void bVariableCastRate(Character& src, OperationType opType, int32_t arg1);
	void bVariableCast(Character& src, OperationType opType, int32_t arg1);
	void bNoCastCancel(Character& src, OperationType opType, int32_t arg1);
	void bNoCastCancel2(Character& src, OperationType opType, int32_t arg1);
	void bDelayRate(Character& src, OperationType opType, int32_t arg1);
	void bHit(Character& src, OperationType opType, int32_t arg1);
	void bHitRate(Character& src, OperationType opType, int32_t arg1);
	void bCritical(Character& src, OperationType opType, int32_t arg1);
	void bCriticalRate(Character& src, OperationType opType, int32_t arg1);
	void bCriticalLong(Character& src, OperationType opType, int32_t arg1);
	void bFlee(Character& src, OperationType opType, int32_t arg1);
	void bFleeRate(Character& src, OperationType opType, int32_t arg1);
	void bFlee2(Character& src, OperationType opType, int32_t arg1);
	void bFlee2Rate(Character& src, OperationType opType, int32_t arg1);
	void bPerfectHitRate(Character& src, OperationType opType, int32_t arg1);
	void bPerfectHitAddRate(Character& src, OperationType opType, int32_t arg1);
	void bSpeedRate(Character& src, OperationType opType, int32_t arg1);
	void bSpeedAddRate(Character& src, OperationType opType, int32_t arg1);
	void bAspd(Character& src, OperationType opType, int32_t arg1);
	void bAspdRate(Character& src, OperationType opType, int32_t arg1);
	void bAtkRange(Character& src, OperationType opType, int32_t arg1);
	void bAddMaxWeight(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreDefRace(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreMdefRace(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreDefEle(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreMdefEle(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreMdefRate(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreDefClass(Character& src, OperationType opType, int32_t arg1);
	void bIgnoreMdefClass(Character& src, OperationType opType, int32_t arg1);
	void bMagicDamageReturn(Character& src, OperationType opType, int32_t arg1);
	void bShortWeaponDamageReturn(Character& src, OperationType opType, int32_t arg1);
	void bLongWeaponDamageReturn(Character& src, OperationType opType, int32_t arg1);
	void bUnstripable(Character& src, OperationType opType, int32_t arg1);
	void bUnstripableWeapon(Character& src, OperationType opType, int32_t arg1);
	void bUnstripableArmor(Character& src, OperationType opType, int32_t arg1);
	void bUnstripableHelm(Character& src, OperationType opType, int32_t arg1);
	void bUnstripableShield(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakable(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableGarment(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableWeapon(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableArmor(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableHelm(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableShield(Character& src, OperationType opType, int32_t arg1);
	void bUnbreakableShoes(Character& src, OperationType opType, int32_t arg1);
	void bBreakWeaponRate(Character& src, OperationType opType, int32_t arg1);
	void bBreakArmorRate(Character& src, OperationType opType, int32_t arg1);
	void bAddMonsterDropChainItem(Character& src, OperationType opType, int32_t arg1);
	void bDoubleRate(Character& src, OperationType opType, int32_t arg1);
	void bDoubleAddRate(Character& src, OperationType opType, int32_t arg1);
	void bSplashRange(Character& src, OperationType opType, int32_t arg1);
	void bSplashAddRange(Character& src, OperationType opType, int32_t arg1);
	void bClassChange(Character& src, OperationType opType, int32_t arg1);
	void bAddStealRate(Character& src, OperationType opType, int32_t arg1);
	void bRestartFullRecover(Character& src, OperationType opType, int32_t arg1);
	void bNoSizeFix(Character& src, OperationType opType, int32_t arg1);
	void bNoGemStone(Character& src, OperationType opType, int32_t arg1);
	void bIntravision(Character& src, OperationType opType, int32_t arg1);
	void bNoKnockback(Character& src, OperationType opType, int32_t arg1);
	void bPerfectHide(Character& src, OperationType opType, int32_t arg1);
	void bHPRegenRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPLossRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPRegenRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPLossRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillUseSP(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillUseSPRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPDrainValue(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPDrainRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPDrainValue(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPDrainRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPDrainValueRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPDrainValueRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPVanishRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPVanishRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPGainRaceAttack(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPGainRaceAttack(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSPGainRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillAtk(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bWeaponAtk(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bWeaponAtkRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillHeal(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillHeal2(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddItemHealRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddItemGroupHealRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bCastRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bFixedCastRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillFixedCast(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bVariableCastRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillVariableCast(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSkillCooldown(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddSize(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bMagicAddSize(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSubSize(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddRaceTolerance(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bMagicAddRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSubRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bCriticalAddRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddRace2(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSubRace2(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSubEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bMagicAddEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bMagicAtkEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddDamageMonster(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddMagicDamageMonster(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddDefMonster(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddMdefMonster(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bSubClass(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddClass(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bIgnoreDefRaceRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bIgnoreMdefRaceRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bIgnoreDefClassRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bIgnoreMdefClassRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bExpAddRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bResEff(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddEff(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddEff2(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddEffWhenHit(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bComaRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bComaEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddRaceDropItem(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddRaceDropChainItem(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddMonsterDropItemGroup(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bGetZenyNum(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddGetZenyNum(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bAddSkillBlow(Character& src, OperationType opType, int32_t arg1, int32_t arg2);
	void bHPVanishRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bSPVanishRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bSubEle(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddEff(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddEffOnSkill(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddEffWhenHit(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAutoSpell(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAutoSpellWhenHit(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bSPDrainRate(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bHPDrainValueRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bSPDrainValueRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddMonsterDropItem(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bAddRaceDropItem(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3);
	void bSetDefRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bSetMDefRace(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAddEff(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAddEffOnSkill(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAutoSpellOnSkill(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAutoSpell(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAutoSpellWhenHit(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
	void bAutoSpellOnSkill(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5);
	void bAutoSpell(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5);
	void bAutoSpellWhenHit(Character& src, OperationType opType, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5);

private:
	typedef void(TriggerEffects::* TriggerEffectHandler1)(Character&, OperationType, int32_t);
	typedef void(TriggerEffects::* TriggerEffectHandler2)(Character&, OperationType, int32_t, int32_t);
	typedef void(TriggerEffects::* TriggerEffectHandler3)(Character&, OperationType, int32_t, int32_t, int32_t);
	typedef void(TriggerEffects::* TriggerEffectHandler4)(Character&, OperationType, int32_t, int32_t, int32_t, int32_t);
	typedef void(TriggerEffects::* TriggerEffectHandler5)(Character&, OperationType, int32_t, int32_t, int32_t, int32_t, int32_t);

	void triggerEffect(uint8_t index, Character&, OperationType, int32_t);
	void triggerEffect(uint8_t index, Character&, OperationType, int32_t, int32_t);
	void triggerEffect(uint8_t index, Character&, OperationType, int32_t, int32_t, int32_t);
	void triggerEffect(uint8_t index, Character&, OperationType, int32_t, int32_t, int32_t, int32_t);
	void triggerEffect(uint8_t index, Character&, OperationType, int32_t, int32_t, int32_t, int32_t, int32_t);

	Map& _map;	
};