using System;
using Mirror;

namespace Bacterio.Network
{
    public sealed class BacterioAuthenticator : NetworkAuthenticator
    {
        //Request message structs
        public struct AuthRequestMessage : NetworkMessage
        {
            public string password;
            public int clientToken; //The token is first generated by the server when spawning a MirrorClient
        }

        public struct AuthResponseMessage : NetworkMessage
        {
            public bool isAccepted;
            public bool gameIsRunning;
            public long serverGameStartTime;
        }


        //This should be set by the room
        public ActionOut<NetworkConnection, AuthRequestMessage, AuthResponseMessage> RequireAuthentication;
        public AuthRequestMessage RequestMessage;
        public AuthResponseMessage ResponseMessage;

        public override void OnStartServer()
        {
            // register a handler for the authentication request we expect from client
            NetworkServer.RegisterHandler<AuthRequestMessage>(OnAuthRequestMessage, false);
        }

        public override void OnStartClient()
        {
            // register a handler for the authentication response we expect from server
            NetworkClient.RegisterHandler<AuthResponseMessage>(OnAuthResponseMessage, false);
        }

        public override void OnStopServer()
        {
            NetworkServer.UnregisterHandler<AuthRequestMessage>();
            base.OnStopServer();
        }

        public override void OnStopClient()
        {
            NetworkClient.UnregisterHandler<AuthResponseMessage>();
            base.OnStopClient();
        }

        //This is what is called in the client to authenticate the client
        public override void OnClientAuthenticate()
        {
            NetworkClient.Send(RequestMessage);
        }

        public override void OnServerAuthenticate(NetworkConnection conn)
        {
            //Shouldn't need anythign here
        }


        //Authentication request events
        //Received at the host, to reply to authentication
        public void OnAuthRequestMessage(NetworkConnection conn, AuthRequestMessage msg)
        {
            if (RequireAuthentication != null)
                RequireAuthentication(conn, msg, out ResponseMessage);
            else
            {
                ResponseMessage.isAccepted = false;
            }

            conn.Send(ResponseMessage);

            WDebug.Log("Connection ID: " + conn.connectionId + " was " + (ResponseMessage.isAccepted ? "accepted" : "rejected"));

            if (ResponseMessage.isAccepted)
                ServerAccept(conn);
            else
                ServerReject(conn);
        }

        public void OnAuthResponseMessage(AuthResponseMessage msg)
        {
            WDebug.Log("Connection was " + (msg.isAccepted ? "accepted" : "rejected"));

            //Save the response in client
            ResponseMessage = msg;

            if (msg.isAccepted)
                ClientAccept();
            else
                ClientReject();
        }

    }
}
